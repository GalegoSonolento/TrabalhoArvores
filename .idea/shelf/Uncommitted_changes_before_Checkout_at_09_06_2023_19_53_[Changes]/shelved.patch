Index: src/main/java/Node.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.function.Consumer;\r\n\r\npublic class Node<T extends Comparable<T>> {\r\n    private Node<T> daddy;\r\n\r\n    private final Node<T>[] children = new Node[]{null, null};\r\n    private int cb;\r\n    final private T key;\r\n    private int height;\r\n\r\n    public Node(Node<T> daddy, Node<T> rightSon, Node<T> leftSon, int cb, T key, int height) {\r\n        this.daddy = daddy;\r\n        this.children[0] = leftSon;\r\n        this.children[1] = rightSon;\r\n        this.cb = cb;\r\n        this.key = key;\r\n        this.height = height;\r\n    }\r\n\r\n    public Node(Node<T> daddy, Node<T> rightSon, Node<T> leftSon, int cb, T key) {\r\n        this(daddy, rightSon, leftSon, cb, key, 1);\r\n    }\r\n\r\n    public Node(Node<T> daddy, T key) {\r\n        this(daddy, null, null, 0, key);\r\n    }\r\n\r\n    public Node<T> getDaddy() {\r\n        return daddy;\r\n    }\r\n\r\n    public void setDaddy(Node<T> daddy) {\r\n        this.daddy = daddy;\r\n    }\r\n\r\n    public Node<T> getRightSon() {\r\n        return children[1];\r\n    }\r\n\r\n    public void setRightSon(Node<T> rightSon) {\r\n        this.children[1] = rightSon;\r\n    }\r\n\r\n    public Node<T> getLeftSon() {\r\n        return children[0];\r\n    }\r\n\r\n    public void setLeftSon(Node<T> leftSon) {\r\n        this.children[0] = leftSon;\r\n    }\r\n\r\n    public void changeChild(int pos, Node<T> node) {\r\n        this.children[pos] = node;\r\n    }\r\n\r\n    public Node<T> getChild(int pos) {\r\n        return children[pos];\r\n    }\r\n\r\n    public int getCb() {\r\n        return cb;\r\n    }\r\n\r\n    public void setCb(int cb) {\r\n        this.cb = cb;\r\n    }\r\n\r\n    public T getKey() {\r\n        return key;\r\n    }\r\n\r\n    public int getHeight() {\r\n        return height;\r\n    }\r\n\r\n    public void setHeight(int height) {\r\n        this.height = height;\r\n    }\r\n\r\n    public void updateHeightCb() {\r\n        int left = this.getLeftSon() == null ? 0 : this.getLeftSon().getHeight();\r\n        int right = this.getRightSon() == null ? 0 : this.getRightSon().getHeight();\r\n        this.cb = left-right;\r\n        this.height = 1 + Integer.max(left, right);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        StringBuilder out = new StringBuilder();\r\n        out.append(\"Node { this=\");\r\n        out.append(this.hashCode());\r\n        out.append(\", daddy=\");\r\n        if (daddy != null) {\r\n            out.append(daddy.hashCode());\r\n        }\r\n        out.append(\", leftSon=\");\r\n        if (children[0] != null) {\r\n            out.append(children[0].hashCode());\r\n        }\r\n        out.append(\", rightSon=\");\r\n        if (children[1] != null) {\r\n            out.append(children[1].hashCode());\r\n        }\r\n        out.append(\", cb=\");\r\n        out.append(cb);\r\n        out.append(\", key=\");\r\n        out.append(key);\r\n        out.append(\", height=\");\r\n        out.append(height);\r\n        out.append(\" }\");\r\n        return out.toString();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Node.java b/src/main/java/Node.java
--- a/src/main/java/Node.java	(revision 0017ab11ab4b5f37c77a7f018ca33468f6aa5d7a)
+++ b/src/main/java/Node.java	(date 1686350908481)
@@ -1,60 +1,50 @@
 import java.util.function.Consumer;
 
-public class Node<T extends Comparable<T>> {
-    private Node<T> daddy;
-
-    private final Node<T>[] children = new Node[]{null, null};
+public class Node {
+    private Node daddy, rightSon, leftSon;
     private int cb;
-    final private T key;
+    final private int key;
     private int height;
 
-    public Node(Node<T> daddy, Node<T> rightSon, Node<T> leftSon, int cb, T key, int height) {
+    public Node(Node daddy, Node rightSon, Node leftSon, int cb, int key, int height) {
         this.daddy = daddy;
-        this.children[0] = leftSon;
-        this.children[1] = rightSon;
+        this.rightSon = rightSon;
+        this.leftSon = leftSon;
         this.cb = cb;
         this.key = key;
         this.height = height;
     }
 
-    public Node(Node<T> daddy, Node<T> rightSon, Node<T> leftSon, int cb, T key) {
+    public Node(Node daddy, Node rightSon, Node leftSon, int cb, int key) {
         this(daddy, rightSon, leftSon, cb, key, 1);
     }
 
-    public Node(Node<T> daddy, T key) {
+    public Node(Node daddy, int key) {
         this(daddy, null, null, 0, key);
     }
 
-    public Node<T> getDaddy() {
+    public Node getDaddy() {
         return daddy;
     }
 
-    public void setDaddy(Node<T> daddy) {
+    public void setDaddy(Node daddy) {
         this.daddy = daddy;
     }
 
-    public Node<T> getRightSon() {
-        return children[1];
-    }
-
-    public void setRightSon(Node<T> rightSon) {
-        this.children[1] = rightSon;
-    }
-
-    public Node<T> getLeftSon() {
-        return children[0];
+    public Node getRightSon() {
+        return rightSon;
     }
 
-    public void setLeftSon(Node<T> leftSon) {
-        this.children[0] = leftSon;
+    public void setRightSon(Node rightSon) {
+        this.rightSon = rightSon;
     }
 
-    public void changeChild(int pos, Node<T> node) {
-        this.children[pos] = node;
+    public Node getLeftSon() {
+        return leftSon;
     }
 
-    public Node<T> getChild(int pos) {
-        return children[pos];
+    public void setLeftSon(Node leftSon) {
+        this.leftSon = leftSon;
     }
 
     public int getCb() {
@@ -65,7 +55,7 @@
         this.cb = cb;
     }
 
-    public T getKey() {
+    public int getKey() {
         return key;
     }
 
@@ -88,18 +78,18 @@
     public String toString() {
         StringBuilder out = new StringBuilder();
         out.append("Node { this=");
-        out.append(this.hashCode());
+        out.append(this.key);
         out.append(", daddy=");
         if (daddy != null) {
-            out.append(daddy.hashCode());
+            out.append(daddy.getKey());
         }
         out.append(", leftSon=");
-        if (children[0] != null) {
-            out.append(children[0].hashCode());
+        if (leftSon != null) {
+            out.append(leftSon.getKey());
         }
         out.append(", rightSon=");
-        if (children[1] != null) {
-            out.append(children[1].hashCode());
+        if (rightSon != null) {
+            out.append(rightSon.getKey());
         }
         out.append(", cb=");
         out.append(cb);
